#include <iostream>
    using namespace std;
/* Реализовать структуру или класс для работы с приоритетной очередью
одновременно исполняемых задач и программу с примером работы этой
структуры. Очередь с приоритетом должна 
удовлетворять правилу Трёх и 
содержать методы push, pop, front, empty, tick(увеличить время на единицу). 
Каждая задача должна храниться как объект и состоит из имени,времени
поступления,срока выполнения, дополнительной информации. Когда задача
выполнена в консоль должны выписываться её имя и доп.информация */
    struct data{
        int time_begin;
        int time_exec;
        data* next;
        char name [30];
        char dopdata [100];
    };

    class priority {
        data* head;
        data* tail;
        int timer;

        public:
        priority(): head(NULL), tail(NULL), timer(0){} /* конструктор */

        void tick(){ /* увеличить время на единицу */
        timer++;
        if (head != NULL){
            if(method(head)- timer == 0){
                Pop();
                }
            }
        }

        void Push(){ /* добарить элемент */
            if (head == NULL) {
                data* temp = new data;
                cout << "Enter name of task: ";
                cin >> temp -> name;
                cout << "Enter time of begin of task: ";
                cin >> temp -> time_begin;
                cout << "Enter time of execution of task: ";
                cin >> temp -> time_exec;
                cout << "Enter dop.info of task: ";
                cin >> temp -> dopdata;
                head = temp;
                tail = head;

            }
            else {
                data* temp = new data;

                cout << "Enter name of task: ";
                cin >> temp -> name;
                cout << "Enter time of begin of task: ";
                cin >> temp -> time_begin;
                cout << "Enter time of execution of task: ";
                cin >> temp ->  time_exec;
                cout << "Enter dop.info of task: ";
                cin >> temp ->  dopdata;

                data* p = head;
                while (p -> next != NULL && method(temp) > (method(p -> next)- timer))
                            p = p -> next;

                if (p == tail){
                    if (p == head){
                        if (method(temp) > method (head)){
                            head -> next = temp;
                            tail = temp;
                        }
                        else {
                            temp -> next = head;
                            head = temp;
                        }
                    }
                    else {
                        p -> next = temp;
                        tail = temp;
                        temp -> next =NULL;
                    }
                }
                else{
                    temp -> next = p -> next;
                    p -> next = temp;
                }
            }
        }

        priority (priority&A) { /* конструктор копирования */
            data* p = A.head;
            timer = A.timer;
            if (A.head != NULL){
                head = A.head;
                data* temp = new data;
                temp -> time_begin = A.head -> time_begin;
                temp -> time_exec = A.head -> time_exec;
                for (int i = 0; i < 30; i++)
                        temp -> name [i] = A.head -> name [i];
                for (int i = 0; i < 100; i++)
                        temp -> dopdata [i] = A.head -> dopdata [i];
                tail = temp;
                head = tail;
                while(p -> next != NULL){
                    temp -> next = new data;
                    temp -> next -> time_begin = p -> next -> time_begin;
                    temp  -> next -> time_exec = p  -> next -> time_exec;
                    for (int i = 0; i < 30; i++)
                        temp -> next -> name [i] = p -> next -> name [i];
                    for (int i = 0; i < 100; i++)
                        temp -> next -> dopdata [i] = p -> next -> dopdata [i];
                    tail = temp -> next;
                    p = p -> next;
                    temp = temp -> next;
                }
            }
        }


        void Pop(){ /* взятие элемента */
            if (head == NULL){
                cout << " Queue with priority is empty ";
            }
            else {
                data* temp = head;
                temp = temp -> next;
                cout << "Completed task" << endl << "       Name: " << head -> name << "   Dop. info: " << head -> dopdata << endl;
                delete head;
                head = temp;
            }
        }

        bool Empty(){ /* проверка на пустоту */
            if (head==0)
                return 1;
            else
                return 0;
        }

        void print(){ /* выписывание приоритетной очереди в кансоль */
            if (head != NULL){
                cout << endl << endl << " YOUR QUEUE: " << endl;
                data* temp = head;
                while(temp != NULL){
                    cout << '\t'<< "Name of task: " << temp -> name << endl;
                    cout << '\t' << "Time left of " << temp -> name << ": " << method(temp)- timer << endl;
                    cout << '\t' << "Dop.info of " << temp -> name << ": " << temp -> dopdata << endl;
                    temp = temp -> next;
                    cout << endl;
                }
            }
            else cout << "Queue is empty";
        }

        int method(data* temp){
            return (temp -> time_exec + temp -> time_begin);
        }


        ~priority(){ /* деструктор */
            if (head != NULL){
                data *temp = head;
                while (temp != tail){
                    head = head -> next;
                    delete temp;
                    temp = head;
                }
            }
        }
    };




    int main(){
        priority Q;
        Q.Push();
        Q.Push();
        Q.Push();
        Q.tick();
        Q.tick();
        Q.tick();
        Q.print();
        priority Qu(Q);
        Qu.print();
        if(Q.Empty()==0)
            cout << "Queue is empty";
        else cout << "Queue has elements";
        return 0;
};
