/* Реализовать класс(в крайнем случае структуру) для работы с вектором
комплексных значений. В данной программе запрещено пользоваться шаблонным
вектором из стандартной библиотеки. Структура должна удовлетворять Правилу
Трёх. В структуре должны быть определены/перегружены методы добавления
элемента в конец, изменения размера вектора, оператор квадратные скобки
и выписывание всего вектора в консоль. */
#include <iostream>
using namespace std;
struct Vector{
    int* Re = new int;
    int* Im = new int;
    int Size;
    Vector(int* X, int* Y, int lenght){ /* конструктор */
        Size = lenght;
        for (int i = 0; i < Size; i++){
            Re[i] = X[i];
            Im[i] = Y[i];
        }
    }
    Vector (const Vector &A){ /* конструктор копирования */
        Size = A.Size;
        this->Re = A.Re;
        this->Im = A.Im;
    }
    void print() { /* вывод на экран */
        for (int i = 0; i < Size; i++) {
            cout << Re[i] << "+ i*" << Im[i] << endl;
        }
        cout << endl;
    }
    int* operator[] (int i) { /* оператор [] */
        int *new_array = new int[2];
        new_array[0] = this->Re[i];
        new_array[1] = this->Im[i];
        return new_array;
    }
    ~Vector() { /* деструктор */
        delete[] Re;
        delete[] Im;
    }
};
Vector push_back(Vector &A, int X, int Y){ /* метод push_back */
    A.Size++;
    A.Re[A.Size-1] = X;
    A.Im[A.Size-1] = Y;
    return A;
}
Vector change_size(Vector &A, int L){ /* изменение размера */
    if (L >= 0){
        A.Size+=L;
        for (int i = A.Size - L; i < A.Size; i++){
            A.Re[i] = 0;
            A.Im[i] = 0;
        }
    } else {
        A.Size-=L;
    }
}
void PrInT (int* A){ /* вывод i'того элемента */
    cout << A[0] << "+ i*" << A[1] << endl;
}

int main(){
    int n;
    cin >> n;
    int* X = new int [n];
    int* Y = new int [n];
    for (int i = 0; i < n; i++){
        cin >> X[i] >> Y[i];
    }
    Vector FIRST(X, Y, n);
    FIRST.print();
    int* x = FIRST[2];
    PrInT(x);
    return 0;
}
